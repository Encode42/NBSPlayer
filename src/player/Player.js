import{wait}from"../util/util.js";import{playNote}from"../audio/audio.js";import EventClass from"../util/EventClass.js";const progressBar=document.getElementById("progress-bar"),loopingCheck=document.getElementById("looping-check");let lastProgress=0;export default class Player extends EventClass{name;timePerTick;hasSolo;layers={};audibleLayers=0;stop=!1;currentJob;currentTick=-1;lastTick;updateProgress=!0;loop;maxLoopCount;currentLoopCount=0;loopStartTick;useParity=!0;element;arrayBuffer;constructor(s){super(),this.hasSolo=s.hasSolo,this.timePerTick=s.timePerTick,this.lastTick=s.size,this.loop=s.loopEnabled,this.maxLoopCount=s.maxLoopCount,this.loopStartTick=s.loopStartTick;var o=s.layers.length;for(let t=0;t<o;t++){var e=s.layers[t];this.hasSolo&&!e.solo||e.locked||(this.layers[this.audibleLayers]=e,this.audibleLayers++)}}checkLooping(t){t?(this.loop=!1,loopingCheck.checked=!1,loopingCheck.disabled=!0):(loopingCheck.checked=this.loop,loopingCheck.disabled=!this.loop)}checkProgressBar(){var t;!this.updateProgress||(t=Math.round(this.currentTick/this.lastTick*100*10)/10)!==lastProgress&&(lastProgress=t,progressBar.value=t)}async play(){for(this.stop=!1;!this.stop;)this.currentJob=this.runJob(),await this.currentJob}async runJob(){for(let t=0;t<this.audibleLayers;t++){var o=this.layers[t],e=o.notes[this.currentTick];if(e){let t=(e.panning+o.panning)/2,s=e.pitch;this.useParity&&(t=0===o.panning?e.panning:t,s=e.pitch-2),playNote(e.key,e.instrument,e.velocity*o.velocity/100,t,s)}}await wait(this.timePerTick),this.currentTick++,this.checkProgressBar(),this.currentTick>this.lastTick&&(this.loop&&(0===this.maxLoopCount||this.maxLoopCount>this.currentLoopCount)?(this.currentLoopCount++,this.currentTick=this.loopStartTick,this.emit("loop")):(this.reset(),this.emit("end")))}async pause(){this.stop=!0,await this.currentJob}async reset(){await this.pause(),this.currentTick=-1,this.currentLoopCount=0,progressBar.value=0}}