import"https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js";import{decodeHTML,wait}from"../util/util.js";import Player from"../player/Player.js";import EventClass from"../util/EventClass.js";const progressBar=document.getElementById("progress-bar"),playlistOrder=document.getElementById("playlist-order");Sortable.create(playlistOrder);export default class Playlist extends EventClass{loadedPlayers=new Map;currentPlayer;repeatMode=0;createPlayer(e,t,a){let r="";e.name&&(e.originalAuthor&&(r+=e.originalAuthor,r+=e.author?" & ":" - "),e.author&&(r+=e.author+" - "),r+=e.name);var s=r||a,a=this.loadedPlayers.get(s);if(a)return this.currentPlayer=a;const i=new Player(e);i.name=s,i.arrayBuffer=t,i.addEventListener("end",async()=>{await this.nextPlayer()});const l=document.createElement("li");return l.innerHTML=s,l.addEventListener("click",async e=>{await this.switchTo(e.target.innerHTML),this.emit("clickChange")}),i.element=l,playlistOrder.prepend(l),this.loadedPlayers.set(s,i),this.currentPlayer=i,i.checkLooping(this.loadedPlayers.size),i}async nextPlayer(){if(1===this.repeatMode)this.currentPlayer.reset();else{this.currentPlayer.pause();var a=playlistOrder.children;let t=!1;for(let e=0;e<a.length;e++){const r=a[e];if(r.classList.contains("playing")){if(e+1>=a.length)break;const s=a[e+1];s.classList.add("playing"),r.classList.remove("playing"),this.currentPlayer=this.loadedPlayers.get(decodeHTML(s.innerHTML)),t=!0;break}}if(!t){if(2!==this.repeatMode)return void this.emit("playlistEnd");{const e=this.loadedPlayers.get(decodeHTML(a[0].innerHTML));e.element.classList.add("playing"),this.currentPlayer.element.classList.remove("playing"),this.currentPlayer=e}}}return await wait(1e3),await this.currentPlayer.reset(),this.currentPlayer.play(),this.currentPlayer}async switchTo(e){await this.pauseAll();for(const t of playlistOrder.children)if(t.innerHTML===e){t.classList.add("playing"),this.currentPlayer=this.loadedPlayers.get(decodeHTML(e));break}}async pauseAll(){await this.stopAll(async e=>{await e.pause()})}async resetAll(){await this.stopAll(async e=>{await e.reset(),progressBar.value=0})}async stopAll(e){for(const t of this.loadedPlayers.values())await e?.(t),t.element.classList.remove("playing")}async export(){const t=new zip.ZipWriter(new zip.BlobWriter("application/zip"),{level:9,extendedTimestamp:!1}),a={repeatMode:this.repeatMode};for(let e=0;e<playlistOrder.children.length;e++){const i=playlistOrder.children[e];var r=this.loadedPlayers.get(decodeHTML(i.innerHTML));await t.add("songs/"+r.name,new zip.Uint8ArrayReader(new Uint8Array(r.arrayBuffer))),i.classList.contains("playing")&&(a.playing=e)}await t.add("data",new zip.TextReader(JSON.stringify(a)));var e=URL.createObjectURL(await t.close());const s=document.createElement("a");s.download="playlist.zip",s.href=e,document.body.append(s),s.click(),s.remove()}async import(e){var t,e=new zip.BlobReader(e);const a=new zip.ZipReader(e),r={files:[]};for(const s of await a.getEntries())"data"===s.filename?(t=JSON.parse(await s.getData(new zip.TextWriter)),Object.assign(r,t)):s.filename.startsWith("songs")&&(t=await s.getData(new zip.Uint8ArrayWriter),r.files.unshift({name:s.filename.replace(/^songs\//,""),buffer:t.buffer}));return r}}